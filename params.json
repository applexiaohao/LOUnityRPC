{"name":"蓝鸥Untiy-RPC-Sample","tagline":"","body":"# 蓝鸥Untiy-RPC-Sample\r\n## 使用UnityEngine中的NetWork创建的服务器类\r\n\r\n### LO_GameServer.cs\r\n\r\n** 通过该工具类能够在Unity程序中快速的创建一个游戏房间服务器，查询房间列表，及发送消息功能 **\r\n```\r\nusing System;\r\nusing UnityEngine;\r\n\r\nnamespace LO_Tool\r\n{\r\n\tpublic class LO_GameServer:MonoBehaviour\r\n\t{\r\n    \t#region 单例化\r\n\t\tprivate LO_GameServer ()\r\n\t\t{\r\n\t\t}\r\n\r\n\t\tprivate static GameObject s_LO_GameServer_object;\r\n\t\tprivate static LO_GameServer s_LO_GameServer = null;\r\n\t\tprivate static NetworkView s_LO_NetworkView = null;\r\n\r\n\t\tpublic static LO_GameServer DefaultServer\r\n\t\t{\r\n\t\t\tget{\r\n\t\t\t\tif (s_LO_GameServer == null) \r\n\t\t\t\t{\r\n\t\t\t\t\ts_LO_GameServer_object = new GameObject(\"DefaultServer\");\r\n\t\t\t\t\ts_LO_GameServer = s_LO_GameServer_object.AddComponent<LO_GameServer>();\r\n\t\t\t\t\ts_LO_NetworkView = s_LO_GameServer_object.AddComponent<NetworkView>();\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn s_LO_GameServer;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate static NetworkView DefalutNetworkView\r\n\t\t{\r\n\t\t\tget{\r\n\t\t\t\treturn s_LO_NetworkView;\r\n\t\t\t}\r\n\t\t}\r\n\t\t#endregion\r\n\r\n\t\t/// <summary>\r\n\t\t/// init server...\r\n\t\t/// </summary>\r\n\t\t/// <param name=\"ip\">Ip.</param>\r\n\t\t/// <param name=\"port\">Port.</param>\r\n\t\tpublic bool InitServer(string ip,int port)\r\n\t\t{\r\n\t\t\t//set property\r\n\t\t\tMasterServer.ipAddress = ip;\r\n\t\t\tMasterServer.port = port;\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t/// <summary>\r\n\t\t/// Starts the server.\r\n\t\t/// </summary>\r\n\t\t/// <returns><c>true</c>, if server was started, <c>false</c> otherwise.</returns>\r\n\t\tpublic bool StartServer()\r\n\t\t{\r\n\t\t\t//start...\r\n\t\t\tNetwork.InitializeServer(1000,25000,!Network.HavePublicAddress());\r\n\r\n\t\t\t//register a game\r\n\t\t\tMasterServer.RegisterHost(\"Card\",\"XiaoHao's Doudizhu\");\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\r\n\t\tpublic delegate void RequestRoomComplete(HostData[] list);\r\n\t\tprivate RequestRoomComplete complete_block = null;\r\n\t\tpublic RequestRoomComplete CompleteBlock{\r\n\t\t\tset{\r\n\t\t\t\tcomplete_block = value;\r\n\t\t\t}\r\n\t\t\tget{\r\n\t\t\t\treturn complete_block;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic void StartRequestRoom(RequestRoomComplete block)\r\n\t\t{\r\n\t\t\tLO_GameServer.DefaultServer.CompleteBlock = block;\r\n\r\n\t\t\tMasterServer.RequestHostList(\"Card\");\r\n\t\t}\r\n\r\n\r\n\t\tpublic delegate void JoinHostRoomDelegate(int state);\r\n\r\n\t\tprivate JoinHostRoomDelegate join_delegate = null;\r\n\t\tpublic void JoinHostRoom(HostData room,JoinHostRoomDelegate block)\r\n\t\t{\r\n\t\t\tthis.join_delegate = block;\r\n\r\n\t\t\tNetworkConnectionError error = Network.Connect(room.ip[0],room.port);\r\n\r\n\t\t\tDebug.Log(error);\r\n\t\t}\r\n\r\n\t\tpublic void SendGameMessage(string message)\r\n\t\t{\r\n\t\t\tLO_GameServer.DefalutNetworkView.RPC(\"RemoteReceiveMessage\",RPCMode.All,message);\r\n\t\t}\r\n\r\n\t\t[RPC]\r\n\t\tpublic void RemoteReceiveMessage(string message)\r\n\t\t{\r\n\t\t\tDebug.Log(message);\r\n\t\t}\r\n\r\n\t\t#region Behaviour Actions\r\n\r\n\r\n\t\t/// <summary>\r\n\t\t/// some event notification from master server\r\n\t\t/// </summary>\r\n\t\t/// <param name=\"ev\">Ev.</param>\r\n\t\tpublic void OnMasterServerEvent(MasterServerEvent ev)\r\n\t\t{\r\n\t\t\tswitch (ev) {\r\n\t\t\tcase MasterServerEvent.RegistrationSucceeded:\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\tcase MasterServerEvent.RegistrationFailedNoServer:\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase MasterServerEvent.RegistrationFailedGameType:\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase MasterServerEvent.RegistrationFailedGameName:\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcase MasterServerEvent.HostListReceived:\r\n\t\t\t{\r\n\t\t\t\tLO_GameServer.DefaultServer.CompleteBlock(MasterServer.PollHostList());\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tpublic void OnPlayerConnected(NetworkPlayer player)\r\n\t\t{\r\n\r\n\t\t}\r\n\r\n\t\tpublic void OnConnectedToServer()\r\n\t\t{\r\n\t\t\tthis.join_delegate(0);\r\n\t\t\tDebug.Log(\"OnConnectedToServer\");\r\n\t\t}\r\n\r\n\t\t#endregion\r\n\t}\r\n}\r\n\r\n```\r\n**我们发现几点与通常单例类不同的地方**\r\n- LO_GameServer类继承于MonoBehaviour脚本类\r\n- 静态对象s_LO_GameServer,是通过AddComponent函数实例化的,这与Unity引擎脚本类的实例化机制有关\r\n- LO_GameServer单例类与其他单例类不同的地方在于，需要多创建一个静态的GameObject变量，用来存储该单例脚本对象\r\n\r\n**除了以上几点不同之处，在该类中同样定义了几个委托类型，用来做回调功能的处理**\r\n- RequestRoomComplete委托类型，当请求房间列表成功后就会调用该委托类型的变量complete_block\r\n- JoinHostRoomDelegate委托类型，当加入房间成功后就会调用该委托类型的变量join_delegate\r\n\r\n#### 应用举例\r\n```\r\n\tprivate HostData[] room_list = null;\r\n\tprivate bool  isConnected = false;\r\n\tvoid OnGUI()\r\n\t{\r\n\t\tif (GUILayout.Button(\"StartServer\")) \r\n\t\t{\r\n\t\t\tLO_GameServer.DefaultServer.StartServer();\r\n\t\t}\r\n\r\n\t\tif (GUILayout.Button(\"RequestRoom\")) \r\n\t\t{\r\n\t\t\tLO_GameServer.DefaultServer.StartRequestRoom((HostData[] list)=>{\r\n\t\t\t\tthis.room_list = list;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.room_list != null) {\r\n\t\t\tGUILayout.BeginVertical();\r\n\t\t\t\r\n\t\t\tforeach (HostData item in this.room_list) \r\n\t\t\t{\r\n\t\t\t\tGUILayout.BeginHorizontal();\r\n\t\t\t\t\r\n\t\t\t\tGUILayout.Label(item.ip[0],GUILayout.Width(200f),GUILayout.Height(40f));\r\n\t\t\t\tGUILayout.Label(item.gameName,GUILayout.Width(200f),GUILayout.Height(40f));\r\n\r\n\t\t\t\tstring title = null;\r\n\t\t\t\tAction<HostData> action = null;\r\n\r\n\t\t\t\tAction<HostData> state_connect = (HostData data)=>{\r\n\t\t\t\t\tLO_GameServer.DefaultServer.SendGameMessage(user.ToString());\r\n\t\t\t\t};\r\n\r\n\t\t\t\tAction<HostData> state_no_connect = (HostData data) => \r\n\t\t\t\t{\r\n\t\t\t\t\tLO_GameServer.DefaultServer.JoinHostRoom(data,(int state)=>{\r\n\r\n\t\t\t\t\t\tisConnected = state == 0;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\r\n\t\t\t\tif (isConnected) {\r\n\t\t\t\t\ttitle = \"Send\";\r\n\t\t\t\t\taction = state_connect;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle = \"Connect\";\r\n\t\t\t\t\taction = state_no_connect;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (GUILayout.Button(title,GUILayout.Width(60f),GUILayout.Height(40f))) \r\n\t\t\t\t{\r\n\t\t\t\t\taction(item);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tGUILayout.EndHorizontal();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tGUILayout.EndVertical();\r\n\t\t}\r\n\t}\r\n```\r\n\r\n\r\n_ _ _\r\n\r\n\r\n\r\n##使用C#语言中的System.Xml与System.IO库完成实体对象与XML转换的工具类\r\n### LO_XMLTool.cs\r\n**通过该工具类，能够快速的将C#中的实体对象与XML进行转换,方便大家在编写代码完成进行数据交互的功能**\r\n\r\n```\r\nusing System;\r\nusing System.Xml;\r\nusing System.Xml.Serialization;\r\nusing System.IO;\r\n\r\nnamespace AssemblyCSharp\r\n{\r\n\tpublic class LO_XMLTool\r\n\t{\r\n\r\n\t\t#region 反序列化\r\n\t\t/// <summary>\r\n\t\t/// 反序列化\r\n\t\t/// </summary>\r\n\t\t/// <param name=\"type\">类型</param>\r\n\t\t/// <param name=\"xml\">XML字符串</param>\r\n\t\t/// <returns></returns>\r\n\t\tpublic static object Deserialize(Type type, string xml)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tusing (StringReader sr = new StringReader(xml))\r\n\t\t\t\t{\r\n\t\t\t\t\tXmlSerializer xmldes = new XmlSerializer(type);\r\n\t\t\t\t\treturn xmldes.Deserialize(sr);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (Exception e)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t\t/// <summary>\r\n\t\t/// 反序列化\r\n\t\t/// </summary>\r\n\t\t/// <param name=\"type\"></param>\r\n\t\t/// <param name=\"xml\"></param>\r\n\t\t/// <returns></returns>\r\n\t\tpublic static object Deserialize(Type type, Stream stream)\r\n\t\t{\r\n\t\t\tXmlSerializer xmldes = new XmlSerializer(type);\r\n\t\t\treturn xmldes.Deserialize(stream);\r\n\t\t}\r\n\t\t#endregion\r\n\t\t\r\n\t\t#region 序列化\r\n\t\t/// <summary>\r\n\t\t/// 序列化\r\n\t\t/// </summary>\r\n\t\t/// <param name=\"type\">类型</param>\r\n\t\t/// <param name=\"obj\">对象</param>\r\n\t\t/// <returns></returns>\r\n\t\tpublic static string Serializer(Type type, object obj)\r\n\t\t{\r\n\t\t\tMemoryStream Stream = new MemoryStream();\r\n\t\t\tXmlSerializer xml = new XmlSerializer(type);\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\t//序列化对象\r\n\t\t\t\txml.Serialize(Stream, obj);\r\n\t\t\t}\r\n\t\t\tcatch (InvalidOperationException)\r\n\t\t\t{\r\n\t\t\t\tthrow;\r\n\t\t\t}\r\n\t\t\tStream.Position = 0;\r\n\t\t\tStreamReader sr = new StreamReader(Stream);\r\n\t\t\tstring str = sr.ReadToEnd();\r\n\t\t\t\r\n\t\t\tsr.Dispose();\r\n\t\t\tStream.Dispose();\r\n\t\t\t\r\n\t\t\treturn str;\r\n\t\t}\r\n\t\t\r\n\t\t#endregion\r\n\t}\r\n}\r\n\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}